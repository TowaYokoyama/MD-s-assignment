name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual trigger

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Adjust to your frontend's Node.js version

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Adjust to your backend's Python version

    - name: Install Frontend Dependencies
      run: npm install
      working-directory: frontend

    - name: Install Backend Dependencies
      run: pip install -r requirements.txt
      working-directory: backend

    - name: Run Frontend Lint
      run: npm run lint
      working-directory: frontend

    - name: Run Backend Lint (Ruff)
      run: pip install ruff && ruff check .
      working-directory: backend

    - name: Run Backend Tests (Pytest)
      run: pytest tests/
      working-directory: backend
      env:
        PYTHONPATH: /github/workspace/backend # Ensure Python can find modules

    - name: Run Frontend Tests (Jest)
      run: npm test
      working-directory: frontend

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and Push Backend Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-management-app-backend:latest -f backend/Dockerfile .

    - name: Build and Push Frontend Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-management-app-frontend:latest -f frontend/Dockerfile .

    - name: Push Backend Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/task-management-app-backend:latest

    - name: Push Frontend Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/task-management-app-frontend:latest